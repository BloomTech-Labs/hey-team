RTMClient {
  _events: {},
  _eventsCount: 0,
  connected: false,
  authenticated: false,
  stateMachineConfig:
   { global:
      { stateEnterHooks: [Array],
        stateExitHooks: [],
        stateChangeHooks: [],
        transitionHooks: [],
        unhandledEventHooks: [] },
     initialState: 'disconnected',
     states:
      { disconnected: [Object],
        connecting: [Object],
        connected: [Object],
        disconnecting: [Object],
        reconnecting: [Object] } },
  messageId: 1,
  outgoingEventQueue:
   PQueue {
     queue: PriorityQueue { _queue: [] },
     _queueClass: [Function: PriorityQueue],
     _pendingCount: 0,
     _concurrency: 1,
     _isPaused: true,
     _resolveEmpty: [Function],
     _resolveIdle: [Function] },
  awaitingReplyList: [],
  webClient:
   WebClient {
     _events: {},
     _eventsCount: 0,
     api: { test: [Function: bound apiCall] },
     apps: { permissions: [Object] },
     auth:
      { revoke: [Function: bound apiCall],
        test: [Function: bound apiCall] },
     bots: { info: [Function: bound apiCall] },
     channels:
      { archive: [Function: bound apiCall],
        create: [Function: bound apiCall],
        history: [Function: bound apiCall],
        info: [Function: bound apiCall],
        invite: [Function: bound apiCall],
        join: [Function: bound apiCall],
        kick: [Function: bound apiCall],
        leave: [Function: bound apiCall],
        list: [Function: bound apiCall],
        mark: [Function: bound apiCall],
        rename: [Function: bound apiCall],
        replies: [Function: bound apiCall],
        setPurpose: [Function: bound apiCall],
        setTopic: [Function: bound apiCall],
        unarchive: [Function: bound apiCall] },
     chat:
      { delete: [Function: bound apiCall],
        getPermalink: [Function: bound apiCall],
        meMessage: [Function: bound apiCall],
        postEphemeral: [Function: bound apiCall],
        postMessage: [Function: bound apiCall],
        unfurl: [Function: bound apiCall],
        update: [Function: bound apiCall] },
     conversations:
      { archive: [Function: bound apiCall],
        close: [Function: bound apiCall],
        create: [Function: bound apiCall],
        history: [Function: bound apiCall],
        info: [Function: bound apiCall],
        invite: [Function: bound apiCall],
        join: [Function: bound apiCall],
        kick: [Function: bound apiCall],
        leave: [Function: bound apiCall],
        list: [Function: bound apiCall],
        members: [Function: bound apiCall],
        open: [Function: bound apiCall],
        rename: [Function: bound apiCall],
        replies: [Function: bound apiCall],
        setPurpose: [Function: bound apiCall],
        setTopic: [Function: bound apiCall],
        unarchive: [Function: bound apiCall] },
     dialog: { open: [Function: bound apiCall] },
     dnd:
      { endDnd: [Function: bound apiCall],
        endSnooze: [Function: bound apiCall],
        info: [Function: bound apiCall],
        setSnooze: [Function: bound apiCall],
        teamInfo: [Function: bound apiCall] },
     emoji: { list: [Function: bound apiCall] },
     files:
      { delete: [Function: bound apiCall],
        info: [Function: bound apiCall],
        list: [Function: bound apiCall],
        revokePublicURL: [Function: bound apiCall],
        sharedPublicURL: [Function: bound apiCall],
        upload: [Function: bound apiCall],
        comments: [Object] },
     groups:
      { archive: [Function: bound apiCall],
        create: [Function: bound apiCall],
        createChild: [Function: bound apiCall],
        history: [Function: bound apiCall],
        info: [Function: bound apiCall],
        invite: [Function: bound apiCall],
        kick: [Function: bound apiCall],
        leave: [Function: bound apiCall],
        list: [Function: bound apiCall],
        mark: [Function: bound apiCall],
        open: [Function: bound apiCall],
        rename: [Function: bound apiCall],
        replies: [Function: bound apiCall],
        setPurpose: [Function: bound apiCall],
        setTopic: [Function: bound apiCall],
        unarchive: [Function: bound apiCall] },
     im:
      { close: [Function: bound apiCall],
        history: [Function: bound apiCall],
        list: [Function: bound apiCall],
        mark: [Function: bound apiCall],
        open: [Function: bound apiCall],
        replies: [Function: bound apiCall] },
     migration: { exchange: [Function: bound apiCall] },
     mpim:
      { close: [Function: bound apiCall],
        history: [Function: bound apiCall],
        list: [Function: bound apiCall],
        mark: [Function: bound apiCall],
        open: [Function: bound apiCall],
        replies: [Function: bound apiCall] },
     oauth:
      { access: [Function: bound apiCall],
        token: [Function: bound apiCall] },
     pins:
      { add: [Function: bound apiCall],
        list: [Function: bound apiCall],
        remove: [Function: bound apiCall] },
     reactions:
      { add: [Function: bound apiCall],
        get: [Function: bound apiCall],
        list: [Function: bound apiCall],
        remove: [Function: bound apiCall] },
     reminders:
      { add: [Function: bound apiCall],
        complete: [Function: bound apiCall],
        delete: [Function: bound apiCall],
        info: [Function: bound apiCall],
        list: [Function: bound apiCall] },
     rtm:
      { connect: [Function: bound apiCall],
        start: [Function: bound apiCall] },
     search:
      { all: [Function: bound apiCall],
        files: [Function: bound apiCall],
        messages: [Function: bound apiCall] },
     stars:
      { add: [Function: bound apiCall],
        list: [Function: bound apiCall],
        remove: [Function: bound apiCall] },
     team:
      { accessLogs: [Function: bound apiCall],
        billableInfo: [Function: bound apiCall],
        info: [Function: bound apiCall],
        integrationLogs: [Function: bound apiCall],
        profile: [Object] },
     usergroups:
      { create: [Function: bound apiCall],
        disable: [Function: bound apiCall],
        enable: [Function: bound apiCall],
        list: [Function: bound apiCall],
        update: [Function: bound apiCall],
        users: [Object] },
     users:
      { deletePhoto: [Function: bound apiCall],
        getPresence: [Function: bound apiCall],
        identity: [Function: bound apiCall],
        info: [Function: bound apiCall],
        list: [Function: bound apiCall],
        lookupByEmail: [Function: bound apiCall],
        setActive: [Function: bound apiCall],
        setPhoto: [Function: bound apiCall],
        setPresence: [Function: bound apiCall],
        profile: [Object] },
     token: 'xoxb-334119064773-U6lf4TG13OrIhJm2IvrX1Uvw',
     slackApiUrl: 'https://slack.com/api/',
     retryConfig: { forever: true, maxTimeout: 1800000, randomize: true },
     requestQueue:
      PQueue {
        queue: [Object],
        _queueClass: [Function: PriorityQueue],
        _pendingCount: 1,
        _concurrency: 1,
        _isPaused: false,
        _resolveEmpty: [Function],
        _resolveIdle: [Function] },
     agentConfig: undefined,
     tlsConfig: {},
     logger:
      Logger {
        name: '@slack/client:WebClient',
        levels: [Object],
        methodFactory: [Function],
        getLevel: [Function],
        setLevel: [Function],
        setDefaultLevel: [Function],
        enableAll: [Function],
        disableAll: [Function],
        trace: [Function: noop],
        debug: [Function: noop],
        info: [Function],
        warn: [Function],
        error: [Function],
        log: [Function: noop] },
     userAgent: '@slack:client/4.0.1 node/8.8.0 win32/10.0.16299' },
  agentConfig: undefined,
  autoReconnect: true,
  useRtmConnect: true,
  replyAckOnReconnectTimeout: 2000,
  tlsConfig: {},
  keepAlive:
   KeepAlive {
     _events: { recommend_reconnect: [Object] },
     _eventsCount: 1,
     clientPingTimeout: 6000,
     serverPongTimeout: 4000,
     logger:
      Logger {
        name: '@slack/client:KeepAlive',
        levels: [Object],
        methodFactory: [Function],
        getLevel: [Function],
        setLevel: [Function],
        setDefaultLevel: [Function],
        enableAll: [Function],
        disableAll: [Function],
        trace: [Function: noop],
        debug: [Function: noop],
        info: [Function],
        warn: [Function],
        error: [Function],
        log: [Function: noop] } },
  logger:
   Logger {
     name: '@slack/client:RTMClient',
     levels: { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 },
     methodFactory: [Function],
     getLevel: [Function],
     setLevel: [Function],
     setDefaultLevel: [Function],
     enableAll: [Function],
     disableAll: [Function],
     trace: [Function: noop],
     debug: [Function: noop],
     info: [Function],
     warn: [Function],
     error: [Function],
     log: [Function: noop] },
  stateMachine:
   HierarchicalStateMachine {
     rootStateMachine:
      StateMachine {
        config: [Object],
        taskScheduler: [Object],
        contextFactory: [Function: createContext],
        currentState: 'connecting',
        submachines: [Object],
        timerIDs: null,
        asyncActionCancelers: null,
        handleAsyncActionComplete: [Function: bound handleAsyncActionComplete],
        handleTimeout: [Function: bound handleTimeout] },
     currentStateMachine:
      StateMachine {
        config: [Object],
        taskScheduler: [Object],
        contextFactory: [Function: createContext],
        currentState: 'connecting',
        submachines: [Object],
        timerIDs: null,
        asyncActionCancelers: null,
        handleAsyncActionComplete: [Function: bound handleAsyncActionComplete],
        handleTimeout: [Function: bound handleTimeout] },
     taskScheduler: TaskScheduler { queue: [], isBusy: false } },
  startOpts: undefined }
GET /receiveMessage 200 11.096 ms - -
Message sent:  { ok: true,
  reply_to: 1,
  ts: '1522777882.000314',
  text: 'how are you?' }